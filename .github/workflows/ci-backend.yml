# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: ci-exoscale-image

on:
  push:
    branches:
      - main
    paths:
      - "src/backend/**"

env:
  REGISTRY_NAME: "exo.container-registry.com"
  REPOSITORY_NAME: "c213-emf/todo-app"  # Nom du repository dans la registry (modifié pour être plus générique)

jobs:
  build_connect_push:
    runs-on: ubuntu-latest
    steps:
      # Etape 1: Vérification du code
      - uses: actions/checkout@v4

      # Etape 2: Configuration de Go
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.20"
      # verification permissions
      - name: Debug: List backend directory
        run: ls -l src/backend


      # Etape 3: Aller dans le dossier backend et construire l'image Docker
      - name: Build Docker image
        run: docker build -t todo-app ./src/backend



      # Etape 4: Connexion à la registry Docker avec les secrets
      - name: Login to Docker registry
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}  # Utilisation du secret pour le nom d'utilisateur
          password: ${{ secrets.DOCKER_PASSWORD }}  # Utilisation du secret pour le token

      # Etape 5: Taguer l'image avec le tag approprié
      - name: Tag image
        run: docker tag todo-app ${{ env.REGISTRY_NAME }}/${{ env.REPOSITORY_NAME }}:AH

      # Etape 6: Pousser l'image vers la registry
      - name: Push image
        run: docker push ${{ env.REGISTRY_NAME }}/${{ env.REPOSITORY_NAME }}:AH
